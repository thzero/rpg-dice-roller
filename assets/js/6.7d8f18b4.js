(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{364:function(t,s,a){"use strict";a.r(s);var e=a(18),o=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"diceroll"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#diceroll"}},[t._v("#")]),t._v(" "),a("code",[t._v("DiceRoll")])]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("DiceRoll")]),t._v(" does the actual rolling and holds the results. You can call this directly, bypassing the "),a("code",[t._v("DiceRoller")]),t._v(" object, if you don't need to retain roll logs.")]),t._v(" "),a("h2",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" Constructor")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @param {string|object} notation The dice notation to parse and roll\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DiceRoll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" notation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("A "),a("code",[t._v("DiceRoll")]),t._v(" object requires a dice notation, which it parses into rolls:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" roll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiceRoll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'4d10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Or it can be an object containing a "),a("code",[t._v("notation")]),t._v(" and "),a("code",[t._v("rolls")]),t._v(" to import:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" roll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiceRoll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  notation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'4d6'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  rolls"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RollResults object or array of roll results")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// which is equivalent to doing:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" roll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DiceRoll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  notation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'4d6'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  rolls"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RollResults object or array of roll results")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("If the notation is missing or invalid an error will be thrown")]),t._v(" "),a("h2",{attrs:{id:"prototype-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype-methods"}},[t._v("#")]),t._v(" Prototype methods")]),t._v(" "),a("p",[t._v("Prototype methods can be called on an instance of the object, like so:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" roll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DiceRoll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d6'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nroll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("export")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Method")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Return")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("export({exportFormats=} format)")])]),t._v(" "),a("td",[t._v("Exports the "),a("code",[t._v("DiceRoll")]),t._v(" in the specified format. Throws "),a("code",[t._v("Error")]),t._v(" if format is invalid")]),t._v(" "),a("td",[a("code",[t._v("string\\|null")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("hasRolls()")])]),t._v(" "),a("td",[t._v("Returns whether the object has rolled dice or not")]),t._v(" "),a("td",[a("code",[t._v("boolean")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("roll()")])]),t._v(" "),a("td",[t._v("Rolls the dice for the existing notation and returns the results. Useful if you want to re-roll the dice, but usually better to create a new "),a("code",[t._v("DiceRoll")]),t._v(" instance instead")]),t._v(" "),a("td",[a("code",[t._v("[]")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("toJSON()")])]),t._v(" "),a("td",[t._v("Returns a JSON serialisable version of the object. Called automatically when using "),a("code",[t._v("JSON.stringify(diceroll)")])]),t._v(" "),a("td",[a("code",[t._v("Object")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("toString()")])]),t._v(" "),a("td",[t._v("Returns a string representation of the object (See "),a("code",[t._v("output")]),t._v(" property). Called automatically when the object is cast to a string (ie. "),a("code",[t._v("Rolled: ${diceroll}")]),t._v(")")]),t._v(" "),a("td",[a("code",[t._v("string")])])])])]),t._v(" "),a("h2",{attrs:{id:"properties"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Property")]),t._v(" "),a("th",[t._v("Type")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("notation")])]),t._v(" "),a("td",[a("code",[t._v("String")])]),t._v(" "),a("td",[t._v("The dice notation")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("output")])]),t._v(" "),a("td",[a("code",[t._v("String")])]),t._v(" "),a("td",[t._v("The roll notation and rolls in the format of: "),a("code",[t._v("2d20+1d6: [20,2]+[2] = 24")]),t._v(".")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("rolls")])]),t._v(" "),a("td",[a("code",[t._v("RollResults[]")])]),t._v(" "),a("td",[t._v("The dice rolled for the notation")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("total")])]),t._v(" "),a("td",[a("code",[t._v("Number")])]),t._v(" "),a("td",[t._v("The roll total")])])])]),t._v(" "),a("h2",{attrs:{id:"static-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-methods"}},[t._v("#")]),t._v(" Static methods")]),t._v(" "),a("p",[t._v("Static methods can be called on the class itself, without instantiating an object, like so:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" diceRoll "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" DiceRoll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("import")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("table",[a("thead",[a("tr",[a("th",[t._v("Method")]),t._v(" "),a("th",[t._v("Description")]),t._v(" "),a("th",[t._v("Return")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("import({{}\\|string\\|DiceRoll} data)")])]),t._v(" "),a("td",[t._v("Imports the given data and creates a new dice roll")]),t._v(" "),a("td",[a("code",[t._v("DiceRoll")])])])])])])}),[],!1,null,null,null);s.default=o.exports}}]);